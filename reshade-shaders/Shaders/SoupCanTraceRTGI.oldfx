/// My shartemmpt at SSGI
// Aknowledgements:
// A LOT of help was given me by AlucardDH, creator of UberRT <3
// I was set on the right path and consistently helped by Zenteon
// The quasirandom sequence is an extention of R2 by Marty, creator of the famous RTGI shader.


#define BUFFER_SIZE int2(BUFFER_WIDTH,BUFFER_HEIGHT)

#include "ReShade.fxh"
#include "soupcan_includes/color_ops.fxh"
#include "soupcan_includes/ao.fxh"

#define NOISE_TEX_NAME "QuarkBN_SOUPGI.png"

texture blueNoise < source = NOISE_TEX_NAME; > { Width = 512; Height = 512; Format = RGBA8; };
sampler sBlueNoise { Texture = blueNoise; };

#ifndef RENDER_SCALE
	#define RENDER_SCALE 0.5
	#define BUFFER_SCALED_SIZE = BUFFER_SIZE * RENDER_SCALE
	#define RCP_BUFFER_SCALE rcp(RENDER_SCALE)
#endif

#ifndef SOUPCANGI_SPP
	#define SOUPCANGI_SPP 1
#endif


#ifndef SOUPCAN_DO_TAA
	#define SOUPCAN_DO_TAA true
#endif

texture lightingCache { Width = BUFFER_WIDTH * RENDER_SCALE; Height = BUFFER_HEIGHT * RENDER_SCALE; Format = RGBA16F; };
sampler sLCache { Texture = lightingCache; };

texture DN0 { Width = BUFFER_WIDTH * RENDER_SCALE; Height = BUFFER_HEIGHT * RENDER_SCALE; Format = RGBA16F; };
texture DN1 { Width = BUFFER_WIDTH * RENDER_SCALE; Height = BUFFER_HEIGHT * RENDER_SCALE; Format = RGBA16F; };

sampler SDN0 { Texture = DN0; };
sampler SDN1 { Texture = DN1; };


uniform float strength <ui_type = "slider"; ui_min = 0.0; ui_max = 4.0;> = 0.4;
uniform float aoRadius <ui_type = "slider"; ui_min = 0.0; ui_max = 0.1;> = 0.005;
uniform bool debug <> = false;
uniform float lightAddWhenDebugIsOn <ui_type = "slider"; ui_min = 0.0; ui_max = 1.0;> = 0.0; 

texture intermediateLight { Width = BUFFER_WIDTH * RENDER_SCALE; Height = BUFFER_HEIGHT * RENDER_SCALE; Format = RGBA16F; };
sampler intermediateLightSampler { Texture = intermediateLight; };

uniform float c_phi <ui_type = "slider"; ui_min = 0.1; ui_max = 10.0;> = 1.0;
uniform float n_phi <ui_type = "slider"; ui_min = 0.1; ui_max = 10.0;> = 0.275;
uniform float p_phi <ui_type = "slider"; ui_min = 0.1; ui_max = 10.0;> = 0.161;

uniform float attenuation <ui_type = "slider"; ui_min = 0.001; ui_max = 10.0;> = 0.1;

uniform float kernel[25] <ui_title = "GAUSS WHEIGHTS - DO NOT EDIT";> = {
    1.0/256.0, 1.0/64.0,  3.0/128.0, 1.0/64.0,  1.0/256.0,
    1.0/64.0,  1.0/16.0,  3.0/32.0,  1.0/16.0,  1.0/64.0,
    3.0/128.0, 3.0/32.0,  9.0/64.0,  3.0/32.0,  3.0/128.0,
    1.0/64.0,  1.0/16.0,  3.0/32.0,  1.0/16.0,  1.0/64.0,
    1.0/256.0, 1.0/64.0,  3.0/128.0, 1.0/64.0,  1.0/256.0
};
uniform float2 offset[25] <ui_title = "OFFSETS - DO NOT EDIT";> = {
    float2(-2.0, -2.0), float2(-1.0, -2.0), float2(0.0, -2.0), float2(1.0, -2.0), float2(2.0, -2.0),
    float2(-2.0, -1.0), float2(-1.0, -1.0), float2(0.0, -1.0), float2(1.0, -1.0), float2(2.0, -1.0),
    float2(-2.0,  0.0), float2(-1.0,  0.0), float2(0.0,  0.0), float2(1.0,  0.0), float2(2.0,  0.0),
    float2(-2.0,  1.0), float2(-1.0,  1.0), float2(0.0,  1.0), float2(1.0,  1.0), float2(2.0,  1.0),
    float2(-2.0,  2.0), float2(-1.0,  2.0), float2(0.0,  2.0), float2(1.0,  2.0), float2(2.0,  2.0)
};

float4 calculateLighting(float3 normal, float3 pos, float3 lightPos, float4 color, float3 normalAtSampled, float2 texcoord, float4 vpos) {
	float3 toLight = lightPos - pos;
	float3 fromLight = normalize(-toLight);
	float dist = length(toLight);
	float light = max(dot(normalize(toLight), normal), 0.0) / (dist * dist * attenuation + 1.0) * strength;
	light *= dot(lightPos, lightPos);
	float weight = saturate(dot(-normalAtSampled, fromLight));
	float3 colored = color.rgb * light * weight;
	return float4(colored, color.a);
}

float4 inject(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target {
	float depth = ReShade::GetLinearizedDepth(texcoord);
	if (1.0 - depth < 0.00001) return 0;		
	float4 previous = tex2Dfetch(intermediateLightSampler, vpos.xy / RENDER_SCALE);
	float4 result = inverseTonemapLottes(tex2Dfetch(ReShade::BackBuffer, vpos.xy / RENDER_SCALE));
	result.a = 1.0;
	return result * previous + result;
}

float4 main(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target {
	float4 input = inverseTonemapLottes(tex2Dfetch(ReShade::BackBuffer, vpos.xy));
	float depth = GetDepth(texcoord);
	if (1.0 - depth < 0.00001) return linearTosRGB(input);
	float3 normal = -getWorldSpaceNormal(texcoord);
	float3 pos = getWorldPosition(texcoord, depth);
	float2 seed = tex2Dfetch(sBlueNoise, vpos.xy % 512).rg;
	
	float4 light = 0;
	[unroll]
	for (int i = 0; i < SOUPCANGI_SPP; i++) {
		float2 randF2 = r2_modified(i + (framecount % 1024) * SOUPCANGI_SPP, seed);
		float3 normalAtSampled = getWorldSpaceNormal(randF2);
		float3 samplePos3D = getWorldPosition(randF2, GetDepth(randF2));
		light += calculateLighting(normal, pos, samplePos3D, inverseTonemapLottes(tex2D(sLCache, randF2)), normalAtSampled, texcoord, vpos);
	}
	
	float ao = occlusion(texcoord, vpos.xy * rcp(RENDER_SCALE));
	light *= ao;
	//if (true) return ao;
	return light / SOUPCANGI_SPP;
}

float4 upscale(float4 vpos, float2 texcoord, sampler s, float level) {
// https://jo.dreggn.org/home/2010_atrous.pdf
	float4 noisy = tex2D(s, texcoord);
	float3 normal = getWorldSpaceNormal(texcoord);
	float depth = GetDepth(texcoord);
	if (1.0 - depth < 0.00001) return 0;
	float3 pos = getWorldPosition(texcoord, depth);
	
	float4 sum = 0.0;
	float2 step = ReShade::PixelSize;
	
	
	float cum_w = 0.0;
	[unroll]
	for (int i = 0; i < 25; i++) {// 										this might suck
		float2 uv = texcoord + offset[i] * step * exp2(level) * RENDER_SCALE * 2.0;
		//																   it is smoother :)
		float3 ctmp = tex2Dlod(s, float4(uv, 0.0, 0.0)).rgb;
		float3 t = noisy.rgb - ctmp;
		
		float dist2 = dot(t, t);
		float c_w = min(exp(-(dist2)/c_phi), 1.0);
		
		float3 ntmp = getWorldSpaceNormal(uv);
		t = normal - ntmp;
		dist2 = max(dot(t, t), 0.0);
		float n_w = min(exp(-dist2 / n_phi), 1.0);
		
		float depth = GetDepth(uv);
		float3 ptmp = getWorldPosition(uv, depth);
		t = pos - ptmp;
		dist2 = dot(t, t);
		float p_w = min(exp(-dist2 / p_phi), 1.0);
		
		float weight = c_w * n_w * p_w;
		sum += ctmp * weight * kernel[i];
		cum_w += weight * kernel[i];
	}
	float4 light = sum/cum_w;
	return light;
}

float4 denoisePass0(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target {
	return upscale(vpos, texcoord, intermediateLightSampler, 0);
}

float4 denoisePass1(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target {
	return upscale(vpos, texcoord, SDN1, 1);
}

float4 denoisePass2(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target {
	return upscale(vpos, texcoord, SDN0, 2);
}

float4 denoisePass3(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target {
	return upscale(vpos, texcoord, SDN1, 3);
}

float4 denoisePass4(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target {
	return upscale(vpos, texcoord, SDN0, 4);
}


float4 blend(float4 vpos : SV_Position, float2 texcoord : TEXCOORD) : SV_Target {
		if (!debug) {
			float4 bb = inverseTonemapLottes(tex2Dfetch(ReShade::BackBuffer, vpos.xy));
			return tonemapLottes(tex2Dfetch(SDN1, vpos.xy * RENDER_SCALE) * bb + bb);
		}
		return tonemapLottes(tex2Dfetch(SDN1, vpos.xy * RENDER_SCALE) + lightAddWhenDebugIsOn);
}

technique SoupCanTraceRTGI {
	pass inject {
		VertexShader = PostProcessVS;
		PixelShader = inject;
		RenderTarget = lightingCache;
	}
	pass light {
		VertexShader = PostProcessVS;
		PixelShader = main;
		RenderTarget = intermediateLight;
	}
	pass denoise0 {
		VertexShader = PostProcessVS;
		PixelShader = denoisePass0;
		RenderTarget = DN1;
	}
	pass denoise1 {
		VertexShader = PostProcessVS;
		PixelShader = denoisePass1;
		RenderTarget = DN0;
	}
	pass denoise2 {
		VertexShader = PostProcessVS;
		PixelShader = denoisePass2;
		RenderTarget = DN1;
	}
	pass denoise3 {
		VertexShader = PostProcessVS;
		PixelShader = denoisePass3;
		RenderTarget = DN0;
	}
	pass denoise4 {
		VertexShader = PostProcessVS;
		PixelShader = denoisePass4;
		RenderTarget = DN1;
	}
	pass blend {
		VertexShader = PostProcessVS;
		PixelShader = blend;
	}
}